# Daily Report

--------

## 一、学习时间： *2020年7月6日*

## 二、学习内容：

* ## markdown语法

> ### 1. 标题
>
> ![Screen Shot 2020-07-06 at 9.10.20 PM](/Users/acrush/Desktop/Screen Shot 2020-07-06 at 9.10.20 PM.png)
>
> ### 2.1 字体
>
> ![Screen Shot 2020-07-06 at 9.11.43 PM](/Users/acrush/Desktop/Screen Shot 2020-07-06 at 9.11.43 PM.png)
>
> ### 2.2 分隔线
>
> > 用三个以上的星号（*）、减号（-）、底线（_) 建立一条分隔线。
>
> ### 2.3 删除线
>
> > 字的两端加上两个波浪线（~~)
>
> ### 2.4 下划线
>
> ![Screen Shot 2020-07-06 at 9.19.23 PM](/Users/acrush/Desktop/Screen Shot 2020-07-06 at 9.19.23 PM.png)
>
> ### 2.5 注脚
>
> > [^abc]
> >
> > [^abc]: defg
>
> ### 3. 列表
>
> >* **无序列表**使用星号(*****)、加号(**+**)或减号(**-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容
> >* **有序列表**使用数字并加上 **.** 号来表示
> >* **列表嵌套**只需在子列表中的选项前面添加四个空格即可
>
> ### 4. 区块
>
> > * 区块可以**嵌套**，一个 **>** 符号是最外层，两个 **>** 符号是第一层嵌套
> > * 区块中使用列表，直接>加空格，后面按照列表使用格式
> > * **列表中使用区块** 需要在 **>** 前添加**四个空格的缩进**
>
> ### 5. 代码
>
> * 段落上的一个函数或片段的代码可以用反引号把它包起来（**`**）
>
> * **代码区块**
>
>   > 1 ). 使用 **4 个空格**或者一个**制表符（Tab 键）**
>   >
>   > 2 ). 用 **```** 包裹，并指定一种语言（也可以不指定）
>   >
>   > Eg.
>   >
>   > ```
>   > ​```javascript
>   > $(document).ready(function () {
>   >     alert('RUNOOB');
>   > });
>   > ​```
>   > ```
>
> ### 6. 链接
>
> >* [连接名称]（链接地址）
> >
> >* 直接使用链接地址：   <链接地址>
>
> * 高级链接：通过变量来设置一个链接，变量赋值在文档末尾进行
>
> > ```
> > [Google][1]
> > [1]: http://www.google.com/
> > ```
>
> ### 7. 图片（不熟，复习点）
>
> * 语法
>
>   ```
>   ![alt 属性文本](图片地址)
>   
>   ![alt 属性文本](图片地址 "可选标题")
>   ```
>
> * 使用变量
>
>   ```
>   [图片名称][1]
>   [1]: 图片地址
>   ```
>
> * 更改图片宽度
>
>   ```
>   <img src="图片地址" width="50%">
>   ```
>
> ### 8. 表格
>
> * 语法
>
>   ```
>   |  表头   | 表头  |
>   |  ----  | ----  |
>   | 单元格  | 单元格 |
>   | 单元格  | 单元格 |
>   ```
>
> * 对齐方式
>
>   > - **-:** 设置内容和标题栏居**右对齐**。
>   >
>   > - **:-** 设置内容和标题栏居**左对齐**。
>   >
>   > - **:-:** 设置内容和标题栏**居中对齐**。
>   >
>   > - eg.
>   >
>   >   ```
>   >   | 左对齐 | 右对齐 | 居中对齐 |
>   >   | :-----| ----: | :----: |
>   >   | 单元格 | 单元格 | 单元格 |
>   >   | 单元格 | 单元格 | 单元格 |
>   >   ```
>
> ### 9. 高级技巧
>
> * 支持HTML元素（待学习）
>
>   > 支持的 HTML 元素有：`<kbd> <b> <i> <em> <sup> <sub> <br>`等
>
> * **转义**: 转义字符" \ "
>
> * 插入数学公式（未尝试）
>
>   ```
>   $$
>   公式
>   $$
>   ```

* ## git 语法（没学完，待补充）

  > 1. 首先了解了git是由C语言开发的，是分布式版本控制系统（CVS和SVN是集中式版本控制系统）。
  >
  > ​       分布式的优点：没有“中央服务器”，无需联网。安全性能高。
  >
  > 2. 语法学习
  >
  >    * 使用 `git init` 命令 初始化git 仓库
  >
  >    * 添加文件到git 仓库(两步)
  >
  >      > 1. 使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；
  >      > 2. 使用命令`git commit -m <message>` 
  >
  >    * 使用`git status`命令掌握仓库当前状态
  >
  >    * 使用`git diff` 命令查看修改内容
  >
  >    * `HEAD`指向的版本就是当前版本，使用命令`git reset --hard commit_id` 可以更改版本
  >
  >    * 用`git log`可以查看提交历史，以便确定要回退到哪个版本
  >
  >    * 用`git reflog`查看命令历史，以便确定要回到未来的哪个版本
  >
  >    * git 管理的是**修改**，每次修改，如果不用`git add`到暂存区，那就不会加入到`commit`中
  >
  >    * 丢弃工作区的修改，用命令`git checkout -- file`
  >
  >    * 如果改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD <file>`，就回到了场景1，第二步按场景1操作。
  >
  >    * 已经提交了不合适的修改到版本库时，想要撤销本次提交，则使用版本回退命令语句。
  >
  >    * 删除文件：直接在文件管理器中把没用的文件删了，或者用`rm`命令删了，之后若确定要删除则用命令`git rm`删掉，并且`git commit`
  >
  >    * 
  >
  > 3. 浅略了解了工作区，暂存区，版本库的区别
  >
  > 4. 添加了SSH Key

  

  ## 三、遇到的问题

  在学习[廖雪峰老师的git教程](https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440)时，首先要安装git，但是Xcode版本不同，无法按照教程安装。

  后来尝试了第二种方法，先安装homebrew再通过brew安装git。在terminal输入homebrew安装命令后出现 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused

  解决方案：直接下载一个文件brew_install.rb，然后在终端运行ruby brew_install.rb命令

  参考链接：https://blog.csdn.net/zbc415766331/article/details/104128351/

  结果遇到第二个问题：在终端下载的时候有一个步骤下载速度极慢，大概几十Kb/s。于是我又翻阅了其他人的解决方案，突然看到一个检测是否已经安装git的命令，我就试了一下，发现兜了这么一大圈其实已经安装了git。

## 四、学习总结

今天的学习内容主要都是记的，没有遇到特别难的问题，唯一遇到的安装git的问题给了我一个警示：不要吊死在一棵树上，多试试其他方案。

